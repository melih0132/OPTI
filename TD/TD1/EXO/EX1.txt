EXERCICE 1 - PARTIE 1

### 1. Formulation mathématique du problème
Variables de décision :
- x : nombre de chaises à produire.
- y : nombre de tables à produire.

Fonction objectif :
Maximiser le bénéfice total Z :
Z = 15x + 20y

Contraintes :
1. Contraintes sur les matières premières :
   - 2x + 5y ≤ 180 (bois disponible)
   - 3x + 4y ≤ 200 (métal disponible)

2. Contrainte sur les heures de travail :
   - x + 2y ≤ 80 (heures disponibles)

3. Contraintes de non-négativité :
   - x ≥ 0, y ≥ 0

### 2. Résolution graphique
- Les contraintes sont tracées sur un graphique dans le plan (x, y).
- La zone des solutions réalisables (polygone des contraintes) est délimitée par les droites d'équations :
   - 2x + 5y = 180
   - 3x + 4y = 200
   - x + 2y = 80
- On évalue la fonction objectif Z = 15x + 20y aux sommets de la zone des solutions réalisables.

Sommets de la zone réalisable (résolus par intersection des contraintes) :
1. (x, y) = (0, 40) → Z = 15(0) + 20(40) = 800
2. (x, y) = (50, 0) → Z = 15(50) + 20(0) = 750
3. (x, y) = (30, 25) → Z = 15(30) + 20(25) = 975 (solution optimale)

### 3. Résolution avec l’algorithme du simplexe
Initialisation :
Tableau initial selon les contraintes et la fonction objectif.

Solution optimale obtenue :
- x = 30 (produire 30 chaises)
- y = 25 (produire 25 tables)
- Z = 975 (bénéfice maximum)

### 4. Nouvelle contrainte : réduction des heures à 75
Nouvelle contrainte :
- x + 2y ≤ 75

Zone des solutions réalisables modifiée. La solution optimale est recalculée graphiquement ou avec l’algorithme du simplexe :
1. Recalcul des sommets avec la nouvelle contrainte.
2. Nouvelle solution optimale :
   - x = 25
   - y = 25
   - Z = 925

### 5. Résolution avec Branch and Bound
La méthode Branch and Bound peut être utilisée si des variables entières (x et y) sont nécessaires. Dans ce cas, les solutions entières les plus proches de la solution optimale sont identifiées.

### 6. Code Python (algorithme du simplexe)
```python
from scipy.optimize import linprog

# Coefficients de la fonction objectif (à maximiser)
c = [-15, -20]  # Coefficients négatifs car linprog minimise par défaut

# Matrice des contraintes
A = [
    [2, 5],   # Contraintes bois
    [3, 4],   # Contraintes métal
    [1, 2]    # Contraintes heures
]
b = [180, 200, 80]  # Ressources disponibles

# Résolution
result = linprog(c, A_ub=A, b_ub=b, bounds=(0, None), method="simplex")

# Affichage des résultats
print("Solution optimale :")
print(f"Nombre de chaises (x) : {result.x[0]}")
print(f"Nombre de tables (y) : {result.x[1]}")
print(f"Bénéfice total : {-result.fun}")
